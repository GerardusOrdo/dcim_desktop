unit DataTransForm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, DataForm, ZSqlUpdate, ComCtrls, ExtCtrls, ActnList, Menus, DB, ZAbstractRODataset,
  ZAbstractDataset, ZDataset, ImgList, StdCtrls, Buttons, Grids, DBGrids,
  AdvToolBtn, AdvObj, BaseGrid, DBGridEhGrouping, ToolCtrlsEh,
  DBGridEhToolCtrls, DynVarsEh, GridsEh, DBAxisGridsEh, DBGridEh, EhLibVCL,
  System.Actions, System.ImageList;

type
  TfrmDataTrans = class(TfrmData)
    pnlOption: TPanel;
    pnlOptButton: TPanel;
    pnlOptTanggal: TPanel;
    lblDari: TLabel;
    lblSampai: TLabel;
    dtp1: TDateTimePicker;
    dtp2: TDateTimePicker;
    _ThisMonth: TAction;
    _PrevMonth: TAction;
    _NextMonth: TAction;
    _Today: TAction;
    _PrevDay: TAction;
    _NextDay: TAction;
    _Filter: TAction;
    mniLihat: TMenuItem;
    udtDaftar: TZUpdateSQL;
    _Reprint: TAction;
    _LayoutNota: TAction;
    btnOptHapus: TAdvToolButton;
    btnOptUbah: TAdvToolButton;
    btnOptTambah: TAdvToolButton;
    btnOptLihat: TAdvToolButton;
    btnOptCetak: TAdvToolButton;
    btnOptReprint: TAdvToolButton;
    btnThisMonth: TAdvToolButton;
    btnFilter: TAdvToolButton;
    btnPrevMonth: TAdvToolButton;
    btnNextMonth: TAdvToolButton;
    btnPrevDay: TAdvToolButton;
    btnToday: TAdvToolButton;
    btnNextDay: TAdvToolButton;
    procedure _ThisMonthExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure dsDaftarDataChange(Sender: TObject; Field: TField);
    procedure _ReprintExecute(Sender: TObject);
    procedure _OnPrepareReportExecute(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure tmr1Timer(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
  private
    { Private declarations }
    Animating : Boolean;
  public
    { Public declarations }
  end;

var
  frmDataTrans: TfrmDataTrans;

implementation

uses ArFunctions, ArComponents, BaseForm, ArReports, TypeUnit, ArDBModule,
  Style, ArManager;

{$R *.dfm}

{ TfrmDataTrans }

procedure TfrmDataTrans._ThisMonthExecute(Sender: TObject);
begin
  inherited;
     if Sender = _ThisMonth then
     begin
          dtp1.date := FirstDateThisMonth(date);
          dtp2.date := LastDateThisMonth(date);
     end else
     if Sender = _NextMonth then
     begin
          dtp1.date := FirstDateThisMonth(IncMonth(dtp1.Date, 1));
          dtp2.date := LastDateThisMonth(dtp1.Date);
     end else
     if Sender = _PrevMonth then
     begin
          dtp1.date := FirstDateThisMonth(IncMonth(dtp1.Date, -1));
          dtp2.date := LastDateThisMonth(dtp1.Date);
     end else
     if Sender = _Today then
     begin
          dtp1.date := Now;
          dtp2.date := Now;
     end else
     if Sender = _PrevDay then
     begin
          dtp1.date := dtp1.date -1;
          dtp2.date := dtp1.date;
     end else
     if Sender = _NextDay then
     begin
          dtp1.date := dtp1.date + 1;
          dtp2.date := dtp1.date;
     end;
     _Filter.Execute;
end;

procedure TfrmDataTrans.FormCreate(Sender: TObject);
var
  pnlcolor, pnlTextColor : TColor;
begin
  inherited;        
     dtp1.date := FirstDateThisMonth(ArDB.ServerTime);
     dtp2.date := LastDateThisMonth(ArDB.ServerTime);
     
     if pnlOption.Visible then
     begin                         
          SetGlyphBtns([btnFilter,
                         btnPrevMonth, btnThisMonth, btnNextMonth,
                         btnPrevDay, btnToday, btnNextDay,
                         btnOptTambah, btnOptUbah, btnOptHapus,
                         btnOptCetak, btnOptLihat, btnOptReprint]);
     end;

     pnlcolor := CLR_BLACK;
     pnlTextColor := CLR_WHITE;

     pnlOption.Color := CLR_BLACK;

//     pnlOption.Colors.ButtonBottom := pnlcolor;
//     pnlOption.Colors.ButtonTop := pnlcolor;
//     pnlOption.Colors.ButtonColor := pnlcolor;
//     pnlOption.Colors.Color := pnlcolor;
//     pnlOption.Colors.FrameBottom := pnlcolor;
//     pnlOption.Colors.FrameTop := pnlcolor;
//
//     pnlOption.Colors.HotTrackText := pnlTextColor;
//     pnlOption.Font.Color := pnlTextColor;
//     pnlOption.ButtonFont.Color := pnlTextColor;
//     pnlOption.ButtonFont.Size := 10;
//     pnlOption.ButtonFont.Style := [];
//     
//     pnlOption.Visible := False;
//     pnlOption.Height := 1500;
end;

procedure TfrmDataTrans.dsDaftarDataChange(Sender: TObject; Field: TField);
begin
  inherited;  
  if not Showing then Exit;
     _Reprint.Enabled := _Reprint.Visible and CanPrint and (not dsDaftar.DataSet.IsEmpty);
end;

procedure TfrmDataTrans._ReprintExecute(Sender: TObject);
begin
  inherited;
     if not CanPrint then PesanError('Anda tidak diperkenankan mengakses menu ini');
end;

procedure TfrmDataTrans._OnPrepareReportExecute(Sender: TObject);
begin
     //inherited; 
     TArReport(Sender).SetParValues
          (['NamaPerusahaan','AlamatPerusahaan','TelpPerusahaan','Judul'
           ,'Tgl1','Tgl2','Tanggal1','Tanggal2','NamaUser'],
           [__Company[cpNama], __Company[cpAlamat], __Company[cpTelp], Caption
           ,dtp1.Date, dtp2.Date, dtp1.Date, dtp2.Date, User.Nama]
          );
     if not Assigned (FQCompany) then
          FQCompany:=ROQry(' select "'+__Company[cpNama]+'" NamaPerusahaan '+
                          '   , "'+__Company[cpAlamat]+'" AlamatPerusahaan '+
                          '   , "'+__Company[cpTelp]+'" TelpPerusahaan '+
                          '   , nilai Logo from setting where nama="logo" ')
     else if FQCompany.Active then FQCompany.Refresh else FQCompany.Open;
     TArReport(Sender).AddMoreData(FQCompany, 'Company');
end;

procedure TfrmDataTrans.FormShow(Sender: TObject);
begin
  inherited;
  tmr1.Enabled := True;
end;

procedure TfrmDataTrans.tmr1Timer(Sender: TObject);
var
  Pos : Integer;
  pnlOptionHeightAwal : Integer;
  pnlOptionLeftPos : Integer;
  dbgridHeightAwal : Integer;
begin
  inherited;
  try
    Animating := True;
    tmr1.Enabled := False;
    pnlOptionHeightAwal := pnlOption.Height; //sini
    pnlOptionLeftPos := pnlOption.Left;
    dbgridHeightAwal := dbgDaftar.Height;
  //  AnimateWindow(pnlBottom.Handle, 600, AW_SLIDE or AW_VER_POSITIVE or AW_ACTIVATE);
    pnlOption.Align := alCustom;
    pnlOption.Height := pnlOptionHeightAwal; //sini
    pnlOption.Left := pnlOptionLeftPos;
    pnlData.Align := alRight;
    dbgDaftar.Height := dbgridHeightAwal;
    pnlData.Width := pnlTitle.Width - pnlOption.Width;
    Pos := 600;
    pnlOption.Left := pnlOption.Left - Pos;
    pnlOption.Visible := True;
    Anim_Slide(pnlOption, QuintEaseOut, Horizontal, 600, Pos);
    pnlOption.Align := alLeft;
  finally
    Animating := False;
    pnlData.Align := alClient;
  end;
end;

procedure TfrmDataTrans.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
  inherited;
  CanClose := not (Animating);
end;

end.
